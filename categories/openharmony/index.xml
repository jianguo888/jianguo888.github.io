<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>OpenHarmony - 分类 - 坚果的博客</title>
        <link>jianguo888.github.io/categories/openharmony/</link>
        <description>OpenHarmony - 分类 - 坚果的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 17 Oct 2023 07:45:11 &#43;0800</lastBuildDate><atom:link href="jianguo888.github.io/categories/openharmony/" rel="self" type="application/rss+xml" /><item>
    <title>并发</title>
    <link>jianguo888.github.io/posts/ho/%E5%B9%B6%E5%8F%91/</link>
    <pubDate>Tue, 17 Oct 2023 07:45:11 &#43;0800</pubDate>
    <author>坚果</author>
    <guid>jianguo888.github.io/posts/ho/%E5%B9%B6%E5%8F%91/</guid>
    <description><![CDATA[并发 并发是指在同一时间段内，能够处理多个任务的能力。为了提升应用的响应速度与帧率，以及防止耗时任务对主线程的干扰，HarmonyOS系统提供了异步并发和多线程并发两种处理策略。
异步并发是指异步代码在执行到一定程度后会被暂停，以便在未来某个时间点继续执行，这种情况下，同一时间只有一段代码在执行。 多线程并发允许在同一时间段内同时执行多段代码。在主线程继续响应用户操作和更新UI的同时，后台也能执行耗时操作，从而避免应用出现卡顿。 并发能力在多种场景中都有应用，其中包括单次I/O任务、CPU密集型任务、I/O密集型任务和同步任务等。开发者可以根据不同的场景，选择相应的并发策略进行优化和开发。
ArkTS支持异步并发和多线程并发。
Promise和async/await提供异步并发能力，适用于单次I/O任务的开发场景。 TaskPool和Worker提供多线程并发能力，适用于CPU密集型任务、I/O密集型任务和同步任务等并发场景。详细请参见多线程并发概述。 异步并发 Promise和async/await提供异步并发能力，是标准的JS异步语法。异步代码会被挂起并在之后继续执行，同一时间只有一段代码执行，适用于单次I/O任务的场景开发，例如一次网络请求、一次文件读写等操作。
异步语法是一种编程语言的特性，允许程序在执行某些操作时不必等待其完成，而是可以继续执行其他操作。
Promise Promise是一种用于处理异步操作的对象，可以将异步操作转换为类似于同步操作的风格，以方便代码编写和维护。Promise提供了一个状态机制来管理异步操作的不同阶段，并提供了一些方法来注册回调函数以处理异步操作的成功或失败的结果。
Promise有三种状态：pending（进行中）、fulfilled（已完成）和rejected（已拒绝）。Promise对象创建后处于pending状态，并在异步操作完成后转换为fulfilled或rejected状态。
最基本的用法是通过构造函数实例化一个Promise对象，同时传入一个带有两个参数的函数，通常称为executor函数。executor函数接收两个参数：resolve和reject，分别表示异步操作成功和失败时的回调函数。例如，以下代码创建了一个Promise对象并模拟了一个异步操作：
const promise = new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { const randomNumber = Math.random(); if (randomNumber &gt; 0.5) { resolve(randomNumber); } else { reject(new Error(&#39;Random number is too small&#39;)); } }, 1000); }); 上述代码中，setTimeout函数模拟了一个异步操作，并在1秒钟后随机生成一个数字。如果随机数大于0.5，则执行resolve回调函数并将随机数作为参数传递；否则执行reject回调函数并传递一个错误对象作为参数。
Promise对象创建后，可以使用then方法和catch方法指定fulfilled状态和rejected状态的回调函数。then方法可接受两个参数，一个处理fulfilled状态的函数，另一个处理rejected状态的函数。只传一个参数则表示状态改变就执行，不区分状态结果。使用catch方法注册一个回调函数，用于处理“失败”的结果，即捕获Promise的状态改变为rejected状态或操作失败抛出的异常。例如：
promise.then(result =&gt; { console.info(`Random number is ${result}`); }).catch(error =&gt; { console.error(error.message); }); 上述代码中，then方法的回调函数接收Promise对象的成功结果作为参数，并将其输出到控制台上。如果Promise对象进入rejected状态，则catch方法的回调函数接收错误对象作为参数，并将其输出到控制台上。
async/await async/await是一种用于处理异步操作的Promise语法糖，使得编写异步代码变得更加简单和易读。通过使用async关键字声明一个函数为异步函数，并使用await关键字等待Promise的解析（完成或拒绝），以同步的方式编写异步操作的代码。
async函数是一个返回Promise对象的函数，用于表示一个异步操作。在async函数内部，可以使用await关键字等待一个Promise对象的解析，并返回其解析值。如果一个async函数抛出异常，那么该函数返回的Promise对象将被拒绝，并且异常信息会被传递给Promise对象的onRejected()方法。
下面是一个使用async/await的例子，其中模拟了一个异步操作，该操作会在3秒钟后返回一个字符串。
async function myAsyncFunction() { const result = await new Promise((resolve) =&gt; { setTimeout(() =&gt; { resolve(&#39;Hello, world!]]></description>
</item>
<item>
    <title>Git</title>
    <link>jianguo888.github.io/posts/git/</link>
    <pubDate>Mon, 16 Oct 2023 13:01:47 &#43;0800</pubDate>
    <author>坚果</author>
    <guid>jianguo888.github.io/posts/git/</guid>
    <description><![CDATA[Suap工具获取：IDE插件市场搜索 OpenHarmony SDK Upgrade Assistant
Suap工具使用指导：SDK Upgrade Assistant-使用指导]]></description>
</item>
<item>
    <title>Arkui X</title>
    <link>jianguo888.github.io/posts/arkui-x/</link>
    <pubDate>Sun, 15 Oct 2023 13:23:26 &#43;0800</pubDate>
    <author>坚果</author>
    <guid>jianguo888.github.io/posts/arkui-x/</guid>
    <description><![CDATA[<p></p>]]></description>
</item>
<item>
    <title>OpenHarmony系统类型</title>
    <link>jianguo888.github.io/posts/hong/</link>
    <pubDate>Sat, 14 Oct 2023 13:11:14 &#43;0800</pubDate>
    <author>坚果</author>
    <guid>jianguo888.github.io/posts/hong/</guid>
    <description><![CDATA[OpenHarmony系统类型分为轻量系统，标准系统，小型系统]]></description>
</item>
<item>
    <title>OpenHarmony技术架构</title>
    <link>jianguo888.github.io/posts/openharmony%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</link>
    <pubDate>Sat, 14 Oct 2023 13:03:23 &#43;0800</pubDate>
    <author>坚果</author>
    <guid>jianguo888.github.io/posts/openharmony%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</guid>
    <description><![CDATA[<p>OpenHarmony技术架构</p>
<p></p>]]></description>
</item>
</channel>
</rss>
